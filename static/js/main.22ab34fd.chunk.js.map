{"version":3,"sources":["components/brain.png","components/Navigation.js","components/Logo.js","components/ImageLinkForm.js","components/Image.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navagation","props","style","display","justifyContent","trigger","className","modal","closeOnDocumentClick","Logo","alt","src","brain","width","height","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","Image","imageUrl","id","heigh","Result","imgResult","App","event","setState","input","target","value","state","fetch","method","headers","body","JSON","stringify","then","response","json","number","console","log","convertNumToFlower","catch","err","num","flower","Navigation","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,mC,mOC0B5BC,G,MApBI,SAACC,GACnB,OACD,yBAAKC,MAAO,CAACC,QAAS,OAAQC,eAAe,aAC5C,kBAAC,IAAD,CACGC,QAAS,4BAAQC,UAAU,gCAAlB,sBACTC,OAAK,EACLC,sBAAoB,GAEpB,yCAAc,6BAAd,aACe,6BADf,SAEK,6BAFL,cAGU,6BAHV,UAIM,6BAJN,Y,gBCFWC,EATF,SAACR,GACb,OACC,yBAAKK,UAAU,YACf,yBAAKI,IAAI,OAAOC,IAAKC,IAAOC,MAAM,KAAKC,OAAO,SCiBjCC,G,MApBO,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,eACvC,OACC,6BACI,uBAAGX,UAAU,MACV,gFAEH,yBAAKA,UAAU,UACb,yBAAKA,UAAU,gCACb,2BAAOA,UAAU,qBAAqBY,KAAK,MAAOC,SAAUH,IAC5D,4BACEV,UAAU,sDACVc,QAASH,GAFX,eCAKI,EAVD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACf,OACE,yBAAKhB,UAAU,aACb,yBAAKA,UAAU,gBACb,yBAAKiB,GAAG,aAAab,IAAI,GAAGC,IAAKW,EAAUT,MAAM,QAAQW,MAAM,YCSxDC,EAbA,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAChB,OACE,6BACE,yBAAKpB,UAAU,gBACZ,kCAEH,yBAAKA,UAAU,YACZoB,KCkFMC,G,wDA9Ed,aAAe,IAAD,8BACV,gBAoCJX,cAAgB,SAACY,GACb,EAAKC,SAAS,CAACC,MAAOF,EAAMG,OAAOC,SAtCzB,EAyCbf,eAAiB,WACf,EAAKY,SAAS,CAACH,UAAW,KAC1B,EAAKG,SAAS,CAACP,SAAW,EAAKW,MAAMH,QAAQ,WAE3CI,MAAM,yBAA0B,CAChCC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBjB,SAAU,EAAKW,MAAMX,aAGtBkB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACNC,QAAQC,IAAIF,GACX,EAAKd,SAAS,CAACH,UAAW,EAAKoB,mBAAmBH,QAChDI,OAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAIG,UAtD7B,EAAKf,MAAQ,CACXH,MAAO,GACPR,SAAU,GACVI,UAAW,IALH,E,+DASMuB,GACjB,IAAIC,EAAQ,GACZ,OAAOD,GACL,KAAK,EACHC,EAAS,QACT,MACF,KAAK,EACHA,EAAS,YACT,MACF,KAAK,EACFA,EAAS,OACV,MACF,KAAK,EACHA,EAAS,YACT,MACF,KAAK,EACHA,EAAS,QACT,MAEF,QACEA,EAAS,UAIb,OAAOA,I,+BA8BT,OACE,yBAAK5C,UAAU,OACd,kBAAC6C,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CACCnC,cAAeoC,KAAKpC,cACpBC,eAAgBmC,KAAKnC,iBACrB,kBAAC,EAAD,CAAQS,UAAW0B,KAAKnB,MAAMP,YAC9B,kBAAC,EAAD,CAAOJ,SAAW8B,KAAKnB,MAAMX,gB,GAzEjB+B,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.22ab34fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.4100098c.png\";","import React from 'react';\r\nimport Popup from \"reactjs-popup\";\r\nimport './Navagation.css'\r\n\r\n\r\n\r\nconst Navagation = (props) => {\r\n\treturn (\r\n<nav style={{display: 'flex', justifyContent:'flex-end'}}>\t\t\r\n <Popup\r\n    trigger={<button className=\"button white bg-light-purple\"> Flower varieties </button>}\r\n    modal\r\n    closeOnDocumentClick\r\n  >\r\n    <span>  daisy <br />\r\n    \t    dandelion <br />\r\n\t\t\trose  <br />\r\n\t\t\tsunflower  <br />\r\n\t\t\ttulip  <br />\r\n\t\t\trose  \r\n     </span>\r\n  </Popup>\r\n  </nav>\t\t);\r\n}\r\n\r\n\r\nexport default Navagation;\r\n","import React from 'react';\r\nimport brain from './brain.png'\r\n\r\nconst Logo = (props) => {\r\n\treturn (\r\n\t\t<div className='ma4 mt0 '>\r\n\t\t<img alt='logo' src={brain} width=\"80\" height=\"80\"/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport './ImageLinkForm.css'\r\n\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\r\n\treturn (\r\n\t\t<div>\r\n      <p className='f3'>\r\n        {'Here you can insert a picture of a flower and get what kind of flower it is.'}\r\n      </p>\r\n      <div className='center'>\r\n        <div className='form center pa4 br3 shadow-5'>\r\n          <input className='f4 pa2 w-70 center' type='tex'  onChange={onInputChange} />\r\n          <button\r\n            className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple'\r\n            onClick={onButtonSubmit}\r\n            >Detect</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\t\t);\r\n}\r\n\r\n\r\nexport default ImageLinkForm;\r\n","import React from 'react';\r\n\r\nconst Image = ({ imageUrl }) => {\r\n  return (\r\n    <div className='center ma'>\r\n      <div className='absolute mt2'>\r\n        <img id='inputimage' alt='' src={imageUrl} width='200px' heigh='auto'/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Image;","import React from 'react';\r\n\r\nconst Result = ({ imgResult }) => {\r\n  return (\r\n    <div>\r\n      <div className='white f3 pa4'>\r\n        {'the result of prediction is...'}\r\n      </div>\r\n      <div className='white f1'>\r\n        {imgResult} \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;","import React, {Component} from 'react';\r\nimport Navigation from './components/Navigation'\r\nimport Logo from './components/Logo'\r\nimport ImageLinkForm from './components/ImageLinkForm'\r\nimport Image from './components/Image'\r\nimport Result from './components/Result'\r\n\r\nimport './App.css'\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n\tconstructor() {\r\n\t    super();\r\n\t    this.state = {\r\n\t      input: '',\r\n\t      imageUrl: '',\r\n\t      imgResult: ''\r\n    }\r\n  }\r\n\r\n  convertNumToFlower(num) {\r\n    var flower =''\r\n    switch(num) {\r\n      case 0:\r\n        flower = \"daisy\";\r\n        break;\r\n      case 1:\r\n        flower = \"dandelion\";\r\n        break;\r\n      case 2:\r\n         flower = \"rose\";\r\n        break;\r\n      case 3:\r\n        flower = \"sunflower\";\r\n        break;\r\n      case 4:\r\n        flower = \"tulip\";\r\n        break;\r\n\r\n      default:\r\n        flower = \"default\";\r\n      }\r\n\r\n\r\n    return flower;\r\n  }\r\n\r\n\r\n\tonInputChange = (event) => {\r\n    \tthis.setState({input: event.target.value});\r\n  }\r\n\r\n  onButtonSubmit = () => {\r\n    this.setState({imgResult: ''})\r\n    this.setState({imageUrl:  this.state.input}, () => {\r\n    // console.log(\"text input: \" + this.state.imageUrl);\r\n      fetch('http://localhost:3000/', {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        imageUrl: this.state.imageUrl\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(number => {\r\n      console.log(number);\r\n       this.setState({imgResult: this.convertNumToFlower(number)})\r\n      }).catch(err => console.log(err));\r\n} )\r\n\r\n    \r\n  }\r\n  \r\n  render() {\r\n  return (\r\n    <div className='App'>\r\n     <Navigation />\r\n     <Logo />\r\n     <ImageLinkForm\r\n      onInputChange={this.onInputChange}\r\n      onButtonSubmit={this.onButtonSubmit} />\r\n      <Result imgResult={this.state.imgResult} />\r\n      <Image imageUrl ={this.state.imageUrl} />\r\n      </div>\r\n\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}